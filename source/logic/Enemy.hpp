////////////////////////////////////////////////////////////
//
// Acodemia Copyright (C) Jacek Kwiatek 2021
// e-mail: jackflower (at) poczta.onet.pl
// acodemia.pl
//
// To oprogramowanie dostarczane jest w postaci takiej,
// w jakiej jest, bez wyraźnych ani domniemanych gwarancji.
//
// W żadnym wypadku Autor nie ponosi odpowiedzialności
// za jakiekolwiek szkody powstałe w wyniku korzystania
// z tego oprogramowania.
//
// Zezwala się na korzystanie z tego oprogramowania
// w dowolnym celu, także komercyjnym. Można je zmienić
// i swobodnie rozpowszechniać.
//
// Zastrzega się następujące ograniczenia:
//
// 1. Jeśli używasz tego oprogramowania w swoich
//    produktach, potwierdzenie pochodzenia tego
//    oprogramowania w dokumentacji produktu,
//    byłoby docenione, ale nie jest wymagane.
//
////////////////////////////////////////////////////////////


#ifndef HPP_ENEMY_ACODEMIA
#define HPP_ENEMY_ACODEMIA

#include"Actor.hpp"
#include "Trigger.hpp"

namespace logic
{
	///
	/// Class represents the enemy
	///
	class Enemy : public Actor
	{
	public:

		///
		/// Default constructor 
		///
		Enemy();

		///
		/// Copy constructor
		///
		/// @param copy - copy source
		///
		Enemy(const Enemy& copy);

		///
		/// Move constructor
		///
		/// @param other - reference to r-value 
		///
		Enemy(Enemy&& other);

		///
		/// Virtual destructor
		///
		virtual ~Enemy();

		///
		/// Overloaded copy assignment operator
		///
		/// @param copy - copy source
		///
		Enemy& operator=(const Enemy& copy);

		///
		/// Overloaded move assignment operator
		///
		/// @param other -  reference to r-value 
		///
		Enemy& operator=(Enemy&& other);

		///
		/// Method returns the rate of fire
		///
		const float getRateFire() const;

		///
		/// Method sets the rate of fire
		///
		/// @param rate_fire - rate of fire
		///
		void setRateFire(float rate_fire);

		///
		/// Virtual method updates the object 
		///
		/// @param dt - time
		///
		virtual void update(float dt) override;

		///
		/// Virtual method returns the type of the object - enumeration value
		///
		virtual const EntityType getType() const;

		///
		/// Virtual method returns the signal generated by the object
		///
		virtual const EntitySignalType getSignal() const;

	protected:

	private:

		bool m_selfdestruction_token; // self-destruction outside the camera
		Trigger m_trigger; //shooting trigger

	};

}//namespace logic
#endif//HPP_ENEMY_ACODEMIA
