////////////////////////////////////////////////////////////
//
// Acodemia Copyright (C) Jacek Kwiatek 2021
// e-mail: jackflower (at) poczta.onet.pl
// acodemia.pl
//
// To oprogramowanie dostarczane jest w postaci takiej,
// w jakiej jest, bez wyraźnych ani domniemanych gwarancji.
//
// W żadnym wypadku Autor nie ponosi odpowiedzialności
// za jakiekolwiek szkody powstałe w wyniku korzystania
// z tego oprogramowania.
//
// Zezwala się na korzystanie z tego oprogramowania
// w dowolnym celu, także komercyjnym. Można je zmienić
// i swobodnie rozpowszechniać.
//
// Zastrzega się następujące ograniczenia:
//
// 1. Jeśli używasz tego oprogramowania w swoich
//    produktach, potwierdzenie pochodzenia tego
//    oprogramowania w dokumentacji produktu,
//    byłoby docenione, ale nie jest wymagane.
//
////////////////////////////////////////////////////////////


#ifndef HPP_ACTOR_ACODEMIA
#define HPP_ACTOR_ACODEMIA

#include "Entity.hpp"
#include "../entityengine/EntityType.hpp"
#include "../entityengine/EntitySignalType.hpp"


namespace logic
{
	///
	/// Class represents the actor
	///
	class Actor : public Entity
	{
	public:

		///
		/// Default constructor
		///
		Actor();

		///
		/// Copy constructor
		///
		/// @param copy - copy source
		///
		Actor(const Actor& copy);

		///
		/// Move constructor
		///
		/// @param other - reference to r-value 
		///
		Actor(Actor&& other);

		///
		/// Virtual destructor
		///
		virtual ~Actor();

		///
		/// Overloaded copy assignment operator
		///
		/// @param copy - copy source
		///
		Actor& operator=(const Actor& copy);

		///
		/// Overloaded move assignment operator
		///
		/// @param other -  reference to r-value 
		///
		Actor& operator=(Actor&& other);

		///
		/// Set the direction vector of the object
		///
		/// @param movement - constant reference to the sf::Vector2f object
		///
		void setMovement(const sf::Vector2f& movement);

		///
		/// Get the velocity of the object
		///
		const float getVelocity() const;

		///
		/// Set the velocity of the object
		///
		/// @param velocity - velocity
		///
		void setVelocity(float velocity);

		///
		/// Get object destruction flag
		///
		const bool getDestruction() const;

		///
		/// Set object destruction flag
		///
		/// @param destruction - destruction flag
		///
		void setDestruction(bool destruction);

		///
		/// Get object health
		///
		const float getHealth() const;

		///
		/// Set object health
		///
		/// @param health - health
		///
		void setHealth(float health);

		///
		/// Check if the object is within the camera area
		///
		const bool inCamera() const;

		///
		/// Method returns collision damage
		///
		const float getCollisionDamage() const;

		///
		/// Method sets the rate of fire
		///
		/// @param collision_damage - collision damage
		///
		void setCollisionDamage(float collision_damage);

		///
		/// Method updates damage
		///
		/// @param damage - damage
		///
		void updateDamage(float damage);

		///
		/// Method updates destruction
		///
		void updateDestruction();

		///
		/// Virtual method for updating an object
		///
		/// @param dt - time
		///
		virtual void update(float dt) override;

		///
		/// Virtual method returns the type of the object - enumeration value
		///
		virtual const EntityType getType() const;

		///
		/// Virtual method returns the signal generated by the object
		///
		virtual const EntitySignalType getSignal() const;

	protected:

		sf::Vector2f m_movement; // direction vector
		float m_velocity; // velocity
		bool m_destruction; // destruction flag
		float m_health; // health
		float m_collision_damage; // damage transferred at a collision
		EntitySignalType m_signal_type; // signals
			
	private:
		
	};

}//namespace logic
#endif//HPP_ACTOR_ACODEMIA
