////////////////////////////////////////////////////////////
//
// Acodemia Copyright (C) Jacek Kwiatek 2021
// e-mail: jackflower (at) poczta.onet.pl
// acodemia.pl
//
// To oprogramowanie dostarczane jest w postaci takiej,
// w jakiej jest, bez wyraźnych ani domniemanych gwarancji.
//
// W żadnym wypadku Autor nie ponosi odpowiedzialności
// za jakiekolwiek szkody powstałe w wyniku korzystania
// z tego oprogramowania.
//
// Zezwala się na korzystanie z tego oprogramowania
// w dowolnym celu, także komercyjnym. Można je zmienić
// i swobodnie rozpowszechniać.
//
// Zastrzega się następujące ograniczenia:
//
// 1. Jeśli używasz tego oprogramowania w swoich
//    produktach, potwierdzenie pochodzenia tego
//    oprogramowania w dokumentacji produktu,
//    byłoby docenione, ale nie jest wymagane.
//
////////////////////////////////////////////////////////////


#ifndef HPP_PLAYER_ACODEMIA
#define HPP_PLAYER_ACODEMIA

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include"Actor.hpp"
#include "Trigger.hpp"

namespace logic
{
	////////////////////////////////////////////////////////////
	/// \brief Class represents the player
	///
	/// Inherits from the base class Actor
	///
	/// \see Actor
	///
	////////////////////////////////////////////////////////////
	class Player : public Actor
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		////////////////////////////////////////////////////////////
		Player();

		////////////////////////////////////////////////////////////
		/// \brief Copy constructor
		///
		/// \param copy - copy source
		///
		////////////////////////////////////////////////////////////
		Player(const Player& copy);

		////////////////////////////////////////////////////////////
		/// \brief Move constructor
		///
		/// \param other - reference to r-value 
		///
		////////////////////////////////////////////////////////////
		Player(Player&& other);

		////////////////////////////////////////////////////////////
		/// \brief Virtual destructor
		///
		////////////////////////////////////////////////////////////
		virtual ~Player();

		////////////////////////////////////////////////////////////
		/// \brief Overloaded copy assignment operator
		///
		/// \param copy - copy source
		///
		////////////////////////////////////////////////////////////
		Player& operator=(const Player& copy);

		////////////////////////////////////////////////////////////
		/// \brief Overloaded move assignment operator
		///
		/// \param other -  reference to r-value 
		///
		////////////////////////////////////////////////////////////
		Player& operator=(Player&& other);

		////////////////////////////////////////////////////////////
		/// \brief Get rate of fire
		///
		/// \return rate of fire
		///
		////////////////////////////////////////////////////////////
		const float getRateFire() const;

		////////////////////////////////////////////////////////////
		/// \brief Set rate of fire
		///
		/// \param rate_fire - rate of fire
		///
		////////////////////////////////////////////////////////////
		void setRateFire(float rate_fire);

		/////////////////////////////////////////////////////////////
		/// \brief Event handling
		///
		/// \param key - keyboard button
		///
		/// \param isPressed - click flag
		///
		////////////////////////////////////////////////////////////
		void updatePlayerInput(sf::Keyboard::Key key, bool isPressed);

		////////////////////////////////////////////////////////////
		/// \brief checking if the player is within the camera's field
		/// of view - the window area
		///
		/// \param size_x - limit value in the x axis
		///
		/// \param size_y - limit value in the y axis
		///
		////////////////////////////////////////////////////////////
		void checkPlayerPosition(float size_x, float size_y);

		////////////////////////////////////////////////////////////
		/// \brief Virtual method for updating an object
		///
		/// \param dt - time
		///
		////////////////////////////////////////////////////////////
		virtual void update(float dt) override;

		////////////////////////////////////////////////////////////
		/// \bierf Virtual method returns the type
		/// of the object - enumeration value
		///
		/// \return Enumeration type of the object
		///
		///
		/// \see EntityType
		///
		////////////////////////////////////////////////////////////
		virtual const EntityType getType() const;

		////////////////////////////////////////////////////////////
		/// \brief Virtual method returns the signal
		/// generated by the object
		///
		/// \return signal generated by the object
		///
		/// \see EntitySignalType
		///
		////////////////////////////////////////////////////////////
		virtual const EntitySignalType getSignal() const;

	protected:

	private:

		////////////////////////////////////////////////////////////
		// Member data
		////////////////////////////////////////////////////////////
		bool m_is_moving_Up;
		bool m_is_moving_Down;
		bool m_is_moving_Right;
		bool m_is_moving_Left;
		bool m_is_Shot;
		Trigger m_trigger; // shooting trigger

		// player control
		void controlPlayer(float dt);

	};

}//namespace logic
#endif//HPP _PLAYER_ACODEMIA
